데이터베이스(DBMS) 
===========================
Data Persistence
Data WareHouse, Data Mining

1. 제품의 종류 : Oracle, MS-SQL server, DB2, Informix, Sybase, Mysql,...........................


2. 연결방식:  1) 로컬 DBMS       : Access, Sqlite,
                2) 네트워크 DBMS  : 서버용,클라이언트용
                

3. 데이터의 저장형태 
                1) 계층형 DB       : Tree형식
                2) 네트워크형 DB  : Graph형식 (기본적으로 Tree구조의 형식을 가져가지만 끊어진 선 없이 모두가 다 서로서로 접근할 수 있게 한 것.) 
                3) 관계형 DB       : Table형식
                4) 객체지향형 DB  : Object형식 (좀 어려움. 그래서 관계형DB를 많이쓴다.)
                5) 객체관계형 DB  :                  


4. 정형화(미리 설계를 하고 그 틀에 맞춰 데이터를 저장하는 방식) 
                1) 정형화  : 미리 설계를 하고 그 틀에 맞춰 데이터를 저장하는 방식      ex) 관계형 DB
                2) 비정형화: 미리 설계를 하는 것이 아니라 데이터가 발생하면 바로바로 저장하는 방식    ex) NoSQL

 
5. MySQL
             * 서버용: mysqld.exe
 
             (1) 클라이언트 프로그램
                        - 기본 프로그램(콘솔용) : mysql.exe
                                    mysql -h아이피주소 -u아이디 -p비밀번호                                    
========================================================
                                    mysql -uroot -p1111
                                    mysql -uroot -p
                                    mysql -h127.0.0.1 -uroot -p1111
            
                         -  GUI용 프로그램
                                    WorkBench
                                    Heidi
                                    
             (2) 접속
                   1) 기본 명령어
                              show databases; 
                              use world;
                              show tables; 
                              desc country;
                                               
                   2) 사용자추가
                              -user1 사용자 추가 (%)         -> 하이디             %=호스트에서 모든 곳에서 접근
                              -자기이름으로 db생성
                                            mysql> create database netsong7;
                              -ipconfig
                              -원격접속
                                            mysql -uuser1 -p1111 -h192.168.0xx
                              - db삭제
                                            mysql> drop database netsong7;
                        
                  3) 실습준비
                           -scott.sql 을 이용해서 db생성
                                         1. mysql에 접속 전
                                           cd scott파일이 있는 경로입력 후
                                           mysql -uroot -p < scott.sql                        
                                         2. mysql에 접속 후
                                            source 경로\파일명.sql
                           - sakila,world db를 백업
                                         mysqldump -uroot -p sakila > sakila.sql 
                                         mysqldump -uroot -p world > world.sql


6. SQL (Structured Query Language)
        (1) DDL(Data Definition Language)  : 데이터정의어
                       - CREATE 
                       - ALTER
                       - DROP  
        (2) DML(Data Manipulation Language)
                       - INSERT
                       - UPDATE
                       - DELETE
         (3) QL(Query Language)
                       - SELECT
         (4) DCL(Data Control Language)
                       - 보안, 트랜잭션, 인증, 백업, 복원,................
                       - GRANT(권한부여), REVOKE(권한해제)
         
          *ANSI SQL(표준 SQL)
          *Oracle : PL-SQL (비표준)
          *MS-SQL server : T-SQL 


7. SELECT 
         https://dev.mysql.com/doc/    sql 관련문서
     (1) 기본문법
          SELECT 필드명, 필드명,...... FROM 테이블명;
          SELECT * FROM 테이블명;                  * :전체 필드
    ------------------------------------------------------------
          SELECT ename, mgr,job,sal,comm FROM emp;
          SELECT * FROM emp;
       
          1) 필드 가공 처리
                      SELECT empno,ename, sal, sal+100 FROM emp;
          2) 필드의 alias처리
                      SELECT empno,ename, sal, sal+100  as 증가된급여 FROM emp;
                      SELECT empno,ename, sal, sal+100  증가된급여 FROM emp;
                      SELECT empno,ename, sal, sal+100  '증가된 급여' FROM emp;
          3) 중복제거 : distinct
                      SELECT job FROM emp; 
                      SELECT distinct job FROM emp;
      (2) 확장문법
           1) 정렬기능
                      ORDER BY 필드명 [,필드명,......] [ASC  |   DESC]      ASC:오름차순   DESC:내림차순
                      --------------------------------------------------
                      // 급여가 많은 순으로 이름,급여,부서코드를 조회
                     SELECT ename,sal,deptno FROM emp ORDER BY sal DESC;
                      
                     // 부서별로 급여가 적은 순으로 이름,급여,부서코드를 조회
                     SELECT ename,sal,deptno FROM emp ORDER BY deptno, sal ASC;    
                                                                # 같은 부서끼리 정렬, 급여 오름차순

            2) 조건기능(레코드필터링)
                      WHERE 필드명 조건식  
                    --------------------------------------
                      // 급여가 3000$ 이상인 직원의 사번, 이름, 업무, 급여를 조회하시오
                     SELECT empno,ename,job,sal FROM emp WHERE sal >=3000;  
                    
                      // 업무가 manager인 직원의 이름,업무,급여를 조회
                    SELECT ename,job,sal FROM emp WHERE job = 'manager';

                     // 부서가 20이고 업무가 analyst인 직원의 이름,부서,업무,급여를 조회
                     SELECT ename,deptno,job,sal FROM emp WHERE deptno=20 AND job='analyst';

                     // 급여가 1500 이상 2500 이하를 받는 직원의 이름,부서,업무,급여를 조회
                        (단, 급여가 많은 순으로 조회)
                     SELECT ename,deptno,job,sal FROM emp WHERE sal >= 1500 AND sal<=2500 ORDER BY sal DESC;
                         # SELECT,WHERE,ORDER 등 섞어서 쓸 때 ORDER BY 를 항상 마지막에 한다. 
                     
                    // 급여가 1500 이상 2500 이하를 받는 직원의 이름,부서,업무,급여를 조회
                       (위에거 간단하게)
                    SELECT ename,deptno,job,sal FROM emp WHERE sal BETWEEN 1500 AND 2500 ORDER BY sal DESC;
                                                                                   # BETWEEN 은 이상과 이하일 때만 쓸 수 있다. 

                    // 업무가 clerk,salesman,analyst인 직원의 이름,부서,업무,급여를 조회
                    SELECT ename,deptno,job,sal FROM emp WHERE job='clerk' OR job='salesman' OR job='analyst';
                    
                   // 업무가 clerk,salesman,analyst인 직원의 이름,부서,업무,급여를 조회
                      (위에거 간단하게)
                   SELECT ename,deptno,job,sal FROM emp WHERE job IN('clerk','salesman','analyst');
                                                                                     #IN은 같다의 의미와 OR일 때만 사용가능

                    // 1982년 1월1일 이후 입사한 직원의 이름,업무,입사일자 조회
                     SELECT ename,job,hiredate FROM emp WHERE hiredate >'1982-01-01';

                    // 커미션이 없는 직원의 이름,부서,업무,급여, 커미션을 조회
                    SELECT ename,deptno,job,sal,comm FROM emp WHERE comm IS NULL;

                    // 업무가 salesman이 아닌 사람을 조회
                    SELECT ename,deptno,job,sal,comm FROM emp WHERE job != 'salesman';

                    // 커미션이 있는 직원의  이름,부서,업무,급여, 커미션을 조회
                    SELECT ename,deptno,job,sal,comm FROM emp WHERE comm IS NOT NULL;

                  
                    * like 연산자
                   =============
                      %            _
                    
                     % -> 0개 이상의 문자     
                      _  -> 1개의 문자 대체
            
                     beau%     -> beau, beauabc, beauf, beaurrrrr,.........................
                     beau_      -> beaua, beaub,beaur,beaue,................................
                     
                     // 이름이 s로 시작하는 직원의 이름,업무,급여를 조회
                     SELECT ename,job,sal FROM emp WHERE ename like 's%';
 

             3) GROUP BY 필드명[,필드명,............] HAVING                               # HAVING
                    // 부서별로 급여 평균, 최저금여를 조회
                    SELECT deptno,avg(sal), min(sal) FROM emp GROUP BY deptno;
                    
                    // 부서별로 급여 평균, 최저금여를 조회(단 급여평균이 높은 순으로)
                    SELECT deptno,avg(sal),min(sal) FROM emp GROUP BY deptno ORDER BY avg(sal) DESC; 
                     #3번째 실행                   #1첫째 실행       #2번째실행            #3번째실행
                   
                    // 전체 급여의 합계가 5000을 초과하는 업무에 대해서 급여 합계를 조회
                    SELECT job,sum(sal) FROM emp GROUP BY job HAVING sum(sal)>5000; 
                                                      # WHERE 는 테이블 옆에서 실행해야한다.  그런데 순서상 WHERE 가 GROUP BY 앞에 올수 없으므로 WHERE 대신에 HAVING을 쓴다. 

                    // 전체 급여의 합계가 5000을 초과하는 업무에 대해서 급여 합계를 조회(단, salesman은 제외)
                    SELECT job,sum(sal) FROM emp GROUP BY job HAVING sum(sal)>5000 AND job !='salesman'; 
                    SELECT job,sum(sal) FROM emp WHERE job !='salesman' GROUP BY job HAVING sum(sal)>5000;
                     #네번째           # 첫번쨰         #두번째                      #세번째




<연습문제>
1. 1981년에 입사한 사람의 이름, 업무, 입사일자 조회
SELECT ename,job,hiredate FROM emp WHERE hiredate BETWEEN '1981-01-01' AND '1981-12-31';     
SELECT ename,job,hiredate FROM emp WHERE hiredate LIKE '1981%';


2. 사번이 7902, 7788, 7566인 사원의 이름, 업무, 급여,입사일자 조회
SELECT ename,job,sal,hiredate FROM emp WHERE empno=7902 OR empno=7788 OR empno =7566;


3. 업무가 manager, clerk, analyst가 아닌 직원의 이름, 업무, 급여, 부서번호 조회
SELECT ename,job,sal,deptno FROM emp WHERE job != 'manager' AND job !='clerk' AND job != 'analyst';    
SELECT ename,job,sal,deptno FROM emp WHERE job NOT IN( 'manager','clerk','analyst');    


4. 업무가 president 또는 salesman이고 급여가 1500인  직원의 이름, 급여, 업무, 부서번호 조회
SELECT ename,sal,job,deptno FROM emp WHERE job IN ('president','salesman') AND sal=1500;           
SELECT ename,sal,job,deptno FROM emp WHERE (job= 'president' OR job='salesman') AND sal=1500;



5. 가장 최근에 입사한 직원의 이름, 부서, 업무, 입사일자 조회(현재 검색 일자가 1987년이라 가정한다.)
SELECT ename,deptno,job,hiredate FROM emp ORDER BY hiredate DESC;                                                            X???



6. 같은 부서내에서 같은 업무를 하는 직원의 급여가 많은 순으로 조회
SELECT ename,sal,deptno,job FROM emp GROUP BY deptno,job ORDER BY sal DESC; 
SELECT ename,sal,deptno,job FROM emp ORDER BY deptno,job,sal DESC;                               <-출제의도


7. 커미션이 급여보다 10%이상 많은 직원의 급여가 많은 순으로 조회
SELECT ename,sal,job FROM emp WHERE comm >= sal*1.1 ORDER BY sal DESC;

 
8. 이름에 L자가 2개 있고 30번 부서이거나 직속상사가 7782인 직원의 이름, 부서, 직속상사 조회
SELECT ename,deptno,mgr FROM emp WHERE ename like '%L%L%' AND deptno=30 OR mgr=7782;
 


