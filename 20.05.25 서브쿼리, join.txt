9. Sub Query
.
.
.
(5)연산자
               1) 단일행 연산자
               2) 다중행 연산자 : IN,ANY(or의 뜻),ALL(and의 뜻)
               3) 다중열 비교
(6)상관 sub query
                일반 서브쿼리는 2단계를 거치지만  상관서브커리는 3단계를 거치기 때문에 더 처리가 느리다. 
                그래서 많이 사용하는 것은 좋지 않다.  
                일반서브쿼리는- 서브쿼리만 가져와서 실행하면 실행된다.
                상관서브쿼리는- 서브쿼리만 가져와서 실행하면 실행불가
            




// 다중열 비교
SELECT sal, comm FROM emp WHERE ename='miller';      1300,NULL

//밀러의 급여는 1500  comm은 300달러로 수정
UPDATE emp SET sal=1500, comm=300 WHERE ename='miller';

//급여와 comm이 30번 부서에 있는 직원의 급여와 커미션이 같은 직원에 대해 사번,이름, 부서번호,급여,comm 조회
SELECT empno,ename,deptno,sal,comm FROM emp WHERE sal IN (SELECT sal FROM emp WHERE deptno=30) AND 
comm IN(SELECT comm FROM emp WHERE deptno=30);         

다중열 비교. 우리가 원하는 대답으로 나온다. 
SELECT empno,ename,deptno,sal,comm FROM emp WHERE (sal,comm) IN (SELECT sal,comm FROM emp WHERE deptno=30); 


//밀러의 급여와 comm 원래대로 수정
UPDATE emp SET sal=1300, comm=NULL WHERE ename='miller';




//특별한 형태의 subquery
SELECT * FROM emp WHERE deptno=30;
SELECT * FROM (SELECT * FROM emp WHERE deptno=30) AS t;      -> 보여지는 결과는 위와 같다. 그리고 as 를 이용해 이름지정해줄것!





-INSERT SELECT문 
         
CREATE TABLE tbltest1( 
                         id         int            null,    
                         name     varchar(10),
                         regdate  datetime    
            );


INSERT INTO tbltest1(id,name) SELECT empno,ename FROM emp; 
DELETE FROM tbltest1;
INSERT INTO tbltest1(id,name) SELECT empno,ename FROM emp limit 5;      #레코드를 5개로 제한





//상관서브쿼리
          - 적어도 한명의 직원으로부터 보고를 받을 수 있는 직원의 이름,업무,입사일자,부서번호를 조회
                     SELECT ename,job,hiredate,deptno FROM emp as E1                  
                     WHERE exists(SELECT * FROM emp as E2 WHERE E1.empno=E2.mgr);
                              #exists 는 결과값이 존재하는지 판단하는 함수. 
        
          - 적어도 한명의 직원으로부터 보고를 받을 수 있는 직원의 이름,업무,입사일자,부서번호를 조회(일반서브쿼리 ver)
                    SELECT ename,job,hiredate,deptno FROM emp WHERE empno IN(SELECT distinct mgr FROM emp);
                                                                                                              # distinct  중복제거




<연습문제>
1. 1. Blake와 같은 부서에 있는 모든 직원의 사번, 이름, 입사일자 조회
SELECT empno,ename, hiredate FROM emp WHERE deptno =(SELECT deptno FROM emp WHERE ename='Blake');


2. 평균 급여 이상을 받는 직원들의  사번, 이름을 조회. 단, 급여가 많은 순으로 정렬
SELECT empno,ename,sal FROM emp WHERE sal >=(SELECT AVG(sal) FROM emp ) ORDER BY sal DESC;


3. 이름에 T자가 들어가는 직원이 근무하는 부서에서 근무하는 직원의 사번,이름, 급여 조회
SELECT empno,ename,sal FROM emp WHERE deptno IN (SELECT deptno FROM emp WHERE ename LIKE '%T%');


4. 부서의 위치가 dallas인 모든 직원에 대해 사번, 이름, 급여, 업무조회
SELECT empno,ename,sal,job,emp.deptno,loc FROM emp INNER JOIN dept ON emp.deptno= dept.deptno WHERE loc='dallas';


5. King에게 보고하는 모든 직원의 이름과 부서, 업무, 급여를 조회
SELECT ename,job,sal FROM emp WHERE mgr=(SELECT empno FROM emp WHERE ename='king');



6. 급여가 30번 부서의 최저급여보다 높은 직원의 사번, 이름, 급여 조회
SELECT empno,ename,sal FROM emp WHERE sal>(SELECT MIN(sal) FROM emp WHERE deptno=30);


7. 10번부서에서 30번 부서의 직원과 같은 업무를 하는 직원의 이름과 업무를 조회
SELECT ename,job FROM emp WHERE deptno=10 AND job IN (SELECT job FROM emp WHERE deptno=30);





10. JOIN 
   (1) 여러 개의 테이블을 병합하여 하나의 결과를 도출하기 위한 방법
   (2) 종류     
             1>Cartesian Product Join(데카르트 곱 조인) 
             2>Equi Join : 공통 필드의 레코드를 가져오는 방법(중복된것도 다 가져온다.)
                              INNER JOIN(중복x)
             3>Outer Join : INNER JOIN의 확장
                                    INNER JOIN + 공통되지 않은 레코드까지 추출            
                              종류
                                    LEFT OUTER JOIN
                                    RIGHT OUTER JOIN 
                                    FULL OUTER JOIN(mysql에서 지원 x)
              4>Non Equi Join : 공통되지 않은 필드의 레코드를 가져오는 것.   
              5>Self Join : 서로 같은 테이블을 복제하여 조인

           - INNER JOIN
                     use testdb;
                     create table tblA(
                                id       int,    
                              values    int
                       );                                                     
   
                     create table tblB(
                                id       int,    
                              values    int
                       );                                                     
  
   
                    INSERT INTO tblA VALUES(1,10);
                    INSERT INTO tblA VALUES(2,20);
                    INSERT INTO tblA VALUES(3,30);
                    INSERT INTO tblA VALUES(5,50);
                    INSERT INTO tblA VALUES(7,70);

                    INSERT INTO tblB VALUES(1,10);
                    INSERT INTO tblB VALUES(2,20);
                    INSERT INTO tblB VALUES(4,40);
                    INSERT INTO tblB VALUES(5,50);
                    INSERT INTO tblB VALUES(8,80);
            ================================
            //INNER JOIN 
            SELECT tblA.id,tblB.value FROM tblA INNER JOIN tblB ON tblA.id=tblB.id;
            
            SELECT a.id, a.value, b.id, b.value FROM tblA a INNER JOIN tblB b ON a.id=b.id;

            SELECT a.id, a.value, b.id, b.value FROM tblA a, tblB b WHERE a.id=b.id;
  

             // 직원의 사번,이름,업무,부서번호, 부서명을 조회
             SELECT empno,ename,job,.emp.deptno,dname FROM emp INNER JOIN dept ON emp.deptno=dept.deptno;
                                         # deptno은 emp에도 있고 dept에도 있기 때문에  둘 중하나로 확실히 지정해야한다.
             
            // salesman의 업무를 수행하는 직원의 사번,이름,업무,부서번호, 부서명을 조회
           SELECT empno,ename,job,.emp.deptno,dname FROM emp INNER JOIN dept ON emp.deptno=dept.deptno WHERE job='salesman';
           SELECT empno,ename,job,.emp.deptno,dname FROM emp JOIN dept ON emp.deptno=dept.deptno AND job='salesman';


           // newyork에서 근무하는 직원의 사번,이름,업무,부서명 조회
           SELECT empno,ename,job,dname FROM emp INNER JOIN dept ON emp.deptno=dept.deptno WHERE loc='new york';


         =======================================
         //OUTER JOIN
           SELECT a.id, a.value, b.id, b.value FROM tblA a LEFT OUTER JOIN tblB b ON a.id=b.id;
           
            //직원들의 이름,급여,부서명, 근무지를 조회. 단, 부서명과 근무지는 모두 출력할 수 있도록 조회
            SELECT ename,sal,dname,loc FROM emp LEFT OUTER JOIN dept ON emp.deptno = dept.deptno;      

          =============================================
          //Non equi join 
               SELECT * FROM salgrade;
               
              // 직원들의 사번,이름,업무,급여, 급여등급 조회
               SELECT empno,ename,job,sal,losal,hisal,grade FROM emp INNER JOIN salgrade ON emp.sal >= salgrade.losal AND emp.sal<= salgrade.hisal;
                 
           ================================================
          //Self Join
              // 직원의 사번,이름,업무,관리자, 관리자이름을 조회
                SELECT e1.empno, e1.ename, e1.job, e1.mgr, e2.ename FROM emp e1 INNER JOIN emp e2 ON e1.mgr=e2.empno;

          ========================================
          // 3개의 테이블조인
               //   create table tbA(
                                id       int,    
                              values    int
                       );                                                     
   
                     create table tbB(
                                id       int,    
                              values    int
                       );                      

                      create table tbC(
                                id       int,    
                              values    int
                       );                      

                    INSERT INTO tbA VALUES(1,10);
                    INSERT INTO tbA VALUES(2,20);
                    INSERT INTO tbA VALUES(3,30);
                    INSERT INTO tbA VALUES(5,50);
                    INSERT INTO tbA VALUES(7,70);

                    INSERT INTO tbB VALUES(1,10);
                    INSERT INTO tbB VALUES(2,20);
                    INSERT INTO tbB VALUES(4,40);
                    INSERT INTO tbB VALUES(5,50);
                    INSERT INTO tbB VALUES(8,80);

                    INSERT INTO tbC VALUES(1,10);
                    INSERT INTO tbC VALUES(2,20);
                    INSERT INTO tbC VALUES(7,70);
                    INSERT INTO tbC VALUES(8,80);
                    INSERT INTO tbC VALUES(9,90);
               
                 SELECT tbA.id, tbB.value, tbC.value FROM tbA INNER JOIN tbB ON tbA.id=tbB.id INNER JOIN tbC ON tbB.id=tbC.id;
                 SELECT tbA.id, tbB.value, tbC.value FROM tbA,tbB,tbC WHERE tbA.id=tbB.id AND tbB.id=tbC.id;
                   
              



<연습문제>
1. 각 직원들에 대해 그들의 관리자(직속상사)보다 먼저 입사한 직원의 이름, 입사일, 관리자 이름, 관리자 입사일 조회    # self join  반드시 FROM 후 별칭을 줘야한다.
SELECT E1.ename, E1.hiredate, E2.ename, E2.hiredate FROM emp E1 [INNER] JOIN emp E2 ON E1.mgr=E2.empno AND E1.hiredate < E2.hiredate;
                                                                                    #INNER 생략가능

2. 말단 사원의 사번, 이름, 업무, 부서번호, 근무지를 조회
SELECT empno,ename,job,emp.deptno,loc FROM emp JOIN dept ON emp.deptno=dept.deptno WHERE empno NOT IN(SELECT COALESCE(mgr,0) FROM emp)
ORDER BY hiredate DESC limit 1;                                                                                                                # mgr에 있는 NULL을 0값으로
                                                                                                                                                                  



CREATE TABLE tblBook(
author	varchar(20) not null,
title	varchar(20)
);

INSERT INTO tblBook VALUES('최주현', '하늘과 땅');
INSERT INTO tblBook VALUES('최주현', '바다');
INSERT INTO tblBook VALUES('유은정', '바다');
INSERT INTO tblBook VALUES('박성우', '문');
INSERT INTO tblBook VALUES('최주현', '문');
INSERT INTO tblBook VALUES('박성우', '천국');
INSERT INTO tblBook VALUES('최지은', '천국');
INSERT INTO tblBook VALUES('최주현', '천국');
INSERT INTO tblBook VALUES('박성우', '고슴도치');
INSERT INTO tblBook VALUES('서금동', '나');

3. 한 권의 책에 대해 두 명 이상의 작가가 쓴 책을 검색       # self join 이용
책이름	작가명	작가명
SELECT B1.title, B1.author, B2.author FROM tblBook B1 JOIN tblBook B2 ON B1.title= B2.title AND B1.author>B2.author;  



4. 한 권의 책에 대해 세명의 작가가 쓴 책을 검색
책이름	작가명	작가명	작가명
SELECT  b1.title, b1.author, b2.author , b3.author 
FROM tblBOOK b1 INNER JOIN tblBOOK b2 ON  b1.title=b2.title INNER JOIN tblBOOK b3 
ON  b2.title=b3.title AND b1.author < b2.author AND b2.author <b3.author;





11. 데이터무결성(Data Integrity)
      (1) What?  How?  
                   1) 실체(Entity) 무결성 : 데이터의 중복, 모든 테이블이 기본 키 (primary key)로 선택된 필드 (column)를 가져야 한다. 
                                                기본 키로 선택된 필드는 고유한 값을 가져야 하며, 빈 값은 허용하지 않는다.
                                Primary Key, Unique   PK->      , Unique-> 는 중복만 막아준다. 
                   2) 영역(Domain) 무결성 : 
                                Check (mysql 지원 x)
                   3) 참조(Reference) 무결성 : 
                                Foreign Key 
      (2) 컬럼의 속성
                   - NN 속성 : Not Null. 원래 컬럼은 Null을 허용하지만 NN에서는 Null값을 거부한다.  
                                  Primary Key.
                                  테이블 만들 때 기본값은 Null이지만 Not Null도 사용할 수 있다.  
                                      
                   - ND 속성 : No Duplicate. 원래 컬럼은 중복된 데이터를 가질 수 있지만 중복된 데이터를 갖지 않게 한다. 
                                  Primary Key 
                                  Unique
                   - NC 속성 : No Change. 원래 컬럼은 수정가능하지만 변경불가하게 한다. 
                                  Foreign Key    ->  참조하는 테이블(자식테이블),     
                                                          참조당하는 테이블(부모테이블,자식테이블에게 정보를 제공해줌, 정보를 제공해줘야하기 때문에 맘대로 정보를 바꾸면 안된다.)
                              
      (3) 실습
                       create table tblExam(
                              id         int,
                           name      varchar(10)    
                       );
                       
                       1) Primary Key
                             - NN속성과 ND속성
                             - 한 테이블에 한 개만 사용 가능                                               
                             - 여러 개의 컬럼을 하나로 묶을 수 있다.    # 이름만 가지고하면 동명이인 때문에 비교가 힘들지만 이름,나이,전화번호 등 하나를 같이 묶으면 여러 사람구별가능
                          -------------------------------------------------------------
                            INSERT INTO tblExam VALUES(1,'홍길동');
                            INSERT INTO tblExam VALUES(1,'홍길동');
                            
                            ALTER TABLE tblExam ADD CONSTRAINT pk_id PRIMARY KEY(id);       
                                                          # pk_id라는 이름으로 제약을 추가

                            DELETE FROM tblExam;   삭제하고 

                             ALTER TABLE tblExam ADD CONSTRAINT pk_id PRIMARY KEY(id); 선언하고 다시 

                             INSERT INTO tblExam VALUES(1,'홍길동');
                             INSERT INTO tblExam VALUES(1,'홍길동');   중복데이터를 삽입시 에러가 난다.   # ND속성 확인!


                       / DD (Data Dictionary)
                             
                          show tables;
                          show databases;
                          show processlist;
                          desc information_schema.table_constraints; 
                          SELECT table_name, constraint_name, constraint_type FROM information_schema.table_constraints; 
                         / 





      








